import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.cleanroommc.com'}
        maven { url = "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url = "https://repo.typesafe.com/typesafe/releases/" }
        maven { url = "https://repo1.maven.org/maven2/" }
        maven { url = "https://jitpack.io" }
        maven { url = "https://libraries.minecraft.net" }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '0.1'
group = 'top.qiguaiaaaa.geocraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'geocraft'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

def loadGroovyConfig(){
    def configFile = file('config.groovy')
    new ConfigSlurper().parse(configFile.toURL()).toProperties()
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter(ReplaceTokens, tokens: loadGroovyConfig())
    }
}

compileJava {
    options.encoding = 'UTF-8'

    // 启用增量编译
    options.incremental = true

    // 并行编译
    options.fork = true
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20180814-1.12'

//    replace("@version@", project.version)
//    replace("@mcVersion@", "1.12.2")

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'Dfml.coreMods.load', 'top.qiguaiaaaa.geocraft.MixinEarlyInit'
            property 'Dmixin.debug.export', 'true'
            property 'Dmixin.hotSwap', 'true'
            property 'Dmixin.checks.interfaces','true'
            jvmArgs '-Dfml.coreMods.load=top.qiguaiaaaa.geocraft.MixinEarlyInit'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'Dfml.coreMods.load', 'top.qiguaiaaaa.geocraft.MixinEarlyInit'
            property 'Dmixin.debug.export', 'true'
            property 'Dmixin.hotSwap', 'true'
            property 'Dmixin.checks.interfaces','true'
            jvmArgs '-Dfml.coreMods.load=top.qiguaiaaaa.geocraft.MixinEarlyInit'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'

//    compile ('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
//        exclude module: 'guava'
//        exclude module: 'commons-io'
//        exclude module: 'gson'
//    }

    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    implementation ('zone.rong:mixinbooter:10.6') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:10.6') {
        transitive = false
    }

//    compile files('libs/!mixinbooter-10.5.jar')

    implementation fg.deobf('com.github.jbredwards:fluidlogged-api:1.12.2-Latest-SNAPSHOT')
    implementation fg.deobf("curse.maven:IndustrialCraft-242638:3838713")

    implementation fg.deobf("curse.maven:ImmersiveEngineering-231951:2974106")

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

mixin {
    add sourceSets.main, "mixins.geocraft.refmap.json"
    debug.export = true
}

repositories {
    maven { url = "https://cursemaven.com" }
    maven { url = "https://files.minecraftforge.net/maven" }
    maven { url = "https://repo.spongepowered.org/maven" }
    maven { url = "https://plugins.gradle.org/m2/" }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://maven.cleanroommc.com'}
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "FMLCorePluginContainsFMLMod": true,
            "FMLCorePlugin": "top.qiguaiaaaa.geocraft.MixinEarlyInit",
            "Specification-Title": "GeoCraft",
            "Specification-Vendor": "QiguaiAAAA",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"QiguaiAAAA",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    mixin {
        add sourceSets.main, "mixins.geocraft.refmap.json"
    }
    repositories {
        maven { url = "https://repo.spongepowered.org/maven" }
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
